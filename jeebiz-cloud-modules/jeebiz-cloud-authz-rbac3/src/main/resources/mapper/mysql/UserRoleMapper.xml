<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.hiwepy.cloud.authz.rbac.dao.UserRoleMapper">

    <resultMap id="RoleMap" type="RoleEntity">
        <!-- 角色id -->
        <result property="id" column="id"/>
        <!-- 角色编码 -->
        <result property="key" column="`key`"/>
        <!-- 角色名称 -->
        <result property="name" column="`name`"/>
        <!-- 角色类型（1:原生|2:继承|3:复制|4:自定义） -->
        <result property="type" column="type"/>
        <!-- 角色简介 -->
        <result property="intro" column="intro"/>
        <!-- 角色状态（0:禁用|1:可用） -->
        <result property="status" column="`status`"/>
        <!-- 角色已分配用户量 -->
        <result property="users" column="users"/>
        <!-- 角色创建时间 -->
        <result property="createTime" column="create_time"/>
    </resultMap>

    <resultMap id="PairMap" type="io.hiwepy.boot.api.dao.entities.PairModel">
        <result property="key" column="id"/>
        <result property="value" column="name"/>
    </resultMap>

    <select id="getRoleKeyListByUserId" resultType="java.lang.String" parameterType="java.lang.String" useCache="false">
        SELECT t.`key`
        FROM t_role_list t INNER JOIN t_user_roles x ON t.id = x.role_id
        WHERE t.`status` = 1
          AND x.user_id = #{userId}
        ORDER BY x.priority DESC
    </select>

    <select id="getRolePairList" resultMap="PairMap" useCache="false">
        SELECT t.id,
               t.name
        FROM t_role_list t INNER JOIN t_user_roles x ON t.id = x.role_id
        WHERE t.`status` = 1
          AND x.user_id = #{userId}
        ORDER BY x.priority DESC
    </select>

    <select id="getRoleListByUserId" resultMap="RoleMap" parameterType="java.lang.String" useCache="false">
        SELECT t.id,
               t.`key`,
               t.`name`,
               t.type,
               t.intro,
               t.`status`,
               t.create_time
        FROM t_role_list t INNER JOIN t_user_roles x ON t.id = x.role_id
        WHERE t.`status` = 1
          AND x.user_id = #{userId}
        ORDER BY x.priority ASC
    </select>

    <select id="getPermissionsByUserId" resultType="java.lang.String" parameterType="java.lang.String" useCache="false">
        SELECT DISTINCT y.perms
        FROM t_role_list t
                 INNER JOIN t_user_roles x ON t.id = x.role_id
                 INNER JOIN sys_role_perms y ON t.id = y.role_id
        WHERE x.user_id = #{userId}
        ORDER BY x.priority ASC
    </select>



    <select id="getPagedAllocatedList" resultMap="RoleMap" parameterType="UserAccountEntity" useCache="false">
        SELECT
            t.id,
            t.`key`,
            t.`name`,
            t.type,
            t.intro,
            t.`status`,
            (SELECT COUNT(x.id) FROM t_user_roles x WHERE x.role_id = t.id) as r_users,
            t.create_time
        FROM t_role_list t INNER JOIN t_user_roles x ON t.id = x.role_id
        WHERE x.user_id = #{id}
        <if test="model.status != null and model.status != ''">
            and t.`status` = #{model.status}
        </if>
        <if test="model.type != null and model.type != ''">
            and t.type = #{model.type}
        </if>
        <if test="model.keywords != null and model.keywords != ''">
            and t.`name` like CONCAT('%',#{model.keywords},'%')
        </if>
    </select>

    <select id="getPagedUnAllocatedList" resultMap="RoleMap" parameterType="UserAccountEntity" useCache="false">
        SELECT
            t.id,
            t.`key`,
            t.`name`,
            t.type,
            t.intro,
            t.`status`,
            (SELECT COUNT(x.id) FROM t_user_roles x WHERE x.role_id = t.id) as r_users,
            t.create_time
        FROM t_role_list t
        WHERE NOT EXISTS ( SELECT '1' FROM t_user_roles z WHERE t.role_id = z.role_id and z.user_id = #{userId})
        <if test="model.status != null and model.status != ''">
            and t.`status` = #{model.status}
        </if>
        <if test="model.type != null and model.type != ''">
            and t.type = #{model.type}
        </if>
        <if test="model.keywords != null and model.keywords != ''">
            and t.`name` like CONCAT('%',#{model.keywords},'%')
        </if>
    </select>

</mapper>
