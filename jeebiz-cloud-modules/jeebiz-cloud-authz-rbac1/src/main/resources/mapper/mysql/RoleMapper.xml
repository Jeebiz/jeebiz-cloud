<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.hiwepy.cloud.authz.rbac.dao.RoleMapper">

    <resultMap id="RoleMap" type="RoleEntity">
        <!-- 角色id -->
        <result property="id" column="id"/>
        <!-- 角色编码 -->
        <result property="key" column="`key`"/>
        <!-- 角色名称 -->
        <result property="name" column="`name`"/>
        <!-- 角色类型（1:原生|2:继承|3:复制|4:自定义） -->
        <result property="type" column="type"/>
        <!-- 角色简介 -->
        <result property="intro" column="intro"/>
        <!-- 角色状态（0:禁用|1:可用） -->
        <result property="status" column="`status`"/>
        <!-- 角色已分配用户量 -->
        <result property="users" column="users"/>
        <!-- 角色创建时间 -->
        <result property="createTime" column="create_time"/>
        <!-- 角色授权的标记集合：将 perms list属性映射到collection : http://jaychang.iteye.com/blog/2357143 -->
        <collection property="perms" column="id" select="getPermsByRoleId">
            <result column="perm"/>
        </collection>
    </resultMap>

    <resultMap id="UserAllocatedMap" type="io.hiwepy.cloud.authz.rbac.web.vo.UserAllocatedVO">
        <!-- 用户id -->
        <result property="userId" column="id"/>
        <!-- 用户别名（昵称） -->
        <result property="nickname" column="nickname"/>
        <!-- 用户头像：图片路径或图标样式  -->
        <result property="avatar" column="avatar"/>
        <!-- 用户状态（0:禁用|1:可用） -->
        <result property="status" column="`status`"/>
        <!-- 初始化时间 -->
        <result property="createTime" column="create_time"/>
    </resultMap>

    <resultMap id="PairMap" type="io.hiwepy.boot.api.dao.entities.PairModel">
        <result property="key" column="id"/>
        <result property="value" column="`name`"/>
    </resultMap>

    <select id="getPermsByRoleId" resultType="string" useCache="true">
        SELECT x.perms
        FROM sys_role_perms x
        WHERE x.role_id = #{id}
    </select>

    <select id="getModel" resultMap="RoleMap" parameterType="java.lang.String" useCache="true">
        SELECT t.id,
               t.`key`,
               t.`name`,
               t.type,
               t.intro,
               t.`status`,
               (SELECT COUNT(x.id) FROM t_user_roles x WHERE x.role_id = t.id) as r_users,
               t.create_time
        FROM sys_role_list t
        WHERE t.id = #{id}
    </select>

    <select id="getPagedList" resultMap="RoleMap" parameterType="RoleEntity" useCache="false">
        SELECT
            t.id,
            t.`key`,
            t.`name`,
            t.type,
            t.intro,
            t.`status`,
            (SELECT COUNT(x.id) FROM t_user_roles x WHERE x.role_id = t.id) as r_users,
            t.create_time
        FROM sys_role_list t
        WHERE t.r_key != 'admin'
        <if test="model.status != null and model.status != ''">
            and t.`status` = #{model.status}
        </if>
        <if test="model.type != null and model.type != ''">
            and t.type = #{model.type}
        </if>
        <if test="model.keywords != null and model.keywords != ''">
            and t.`name` like CONCAT('%',#{model.keywords},'%')
        </if>
    </select>

    <select id="getPagedAllocatedList" resultMap="UserAllocatedMap" useCache="false">
        SELECT
            t.`id`,
            t2.nickname,
            t2.avatar,
            t2.gender,
            t.`status`,
            t.create_time
        FROM t_user_account t
        INNER JOIN t_user_profile t2 ON t.user_id = t2.id
        INNER JOIN t_user_roles x ON t.user_id = x.user_id
        WHERE x.role_id = #{model.id}
        <if test="model.status != null and model.status != ''">
            and t.`status` = #{model.status}
        </if>
        <if test="model.keywords != null and model.keywords != ''">
            and t2.user_code like CONCAT('%',#{model.keywords},'%')
        </if>
    </select>

    <select id="getPagedUnAllocatedList" resultMap="UserAllocatedMap" useCache="false">
        SELECT
            t.`id`,
            t2.nickname,
            t2.avatar,
            t2.gender,
            t.`status`,
            t.create_time
        FROM t_user_account t
        INNER JOIN t_user_profile t2 ON t.user_id = t2.id
        WHERE NOT EXISTS ( SELECT '1' FROM t_user_roles z WHERE t.user_id = z.user_id and z.role_id = #{id} )
        <if test="model.status != null and model.status != ''">
            and t.`status` = #{model.status}
        </if>
        <if test="model.keywords != null and model.keywords != ''">
            and t2.user_code like CONCAT('%',#{model.keywords},'%')
        </if>
    </select>

    <select id="getPairList" resultMap="PairMap" parameterType="java.lang.String" useCache="false">
        SELECT t.`id`,
               t.`name`
        FROM sys_role_list t
        WHERE t.`status` = 1
        ORDER BY t.create_time DESC
    </select>

</mapper>
