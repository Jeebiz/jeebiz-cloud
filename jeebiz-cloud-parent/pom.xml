<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>io.hiwepy</groupId>
        <artifactId>jeebiz-cloud-dependencies</artifactId>
        <version>2.0.0-SNAPSHOT</version>
        <relativePath>../jeebiz-cloud-dependencies</relativePath>
    </parent>

    <artifactId>jeebiz-cloud-parent</artifactId>
    <packaging>pom</packaging>
    <description>Jeebiz Projects Parent for Spring Cloud</description>

    <properties>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <project.module>${project.artifactId}</project.module>
        <java.version>1.8</java.version>
        <maven.version>3.0</maven.version>

        <addClasspath>false</addClasspath>
        <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
        <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
        <addExtensions>false</addExtensions>
        <classpathPrefix>lib/</classpathPrefix>

        <!-- 生成部署脚本参数 -->
        <appassembler-dir>${project.build.directory}/generated-resources/appassembler</appassembler-dir>
        <appassembler-jsw-dir>${project.build.directory}/generated-resources/appassembler/jsw</appassembler-jsw-dir>
        <appassembler-bin-fileName>jeebiz-boot</appassembler-bin-fileName>
        <appassembler-app-name>jeebiz-boot</appassembler-app-name>

        <!-- 生成Docker镜像参数: docker build、push地址-->
        <docker.workdir>/u01/boot/${project.artifactId}</docker.workdir>
        <docker.push.repostory>127.0.0.1</docker.push.repostory>
        <docker.build.repostory>http://127.0.0.1:2376</docker.build.repostory>
        <!--push镜像到私有库项目的名称-->
        <docker.registry.name>jeebiz</docker.registry.name>

        <!-- 生成API离线文参数-->
        <swagger.input>http://localhost:8080/v2/api-docs</swagger.input>
        <!-- <swagger.input>${project.basedir}/docs/swagger/swagger.json</swagger.input> -->
        <!-- <swagger.input>${project.basedir}/src/docs/swagger/swagger_petstore.yaml</swagger.input> -->
        <asciidoctor.input.directory>${generated.asciidoc.directory}</asciidoctor.input.directory>
        <asciidoctor.html.output.directory>${project.build.directory}/asciidoc/html</asciidoctor.html.output.directory>
        <asciidoctor.pdf.output.directory>${project.build.directory}/asciidoc/pdf</asciidoctor.pdf.output.directory>
        <generated.asciidoc.directory>${project.build.directory}/asciidoc</generated.asciidoc.directory>

    </properties>

    <dependencies>
        <!-- For Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <optional>true</optional>
        </dependency>
        <!-- https://mvnrepository.com/artifact/io.micrometer/micrometer-registry-prometheus -->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
        </dependency>
        <!-- For Spring Boot's Actuator  -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- For Spring Boot Test-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- For Spring Cloud Loadbalancer -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-loadbalancer</artifactId>
        </dependency>

    </dependencies>

    <build>
        <pluginManagement>
            <plugins>
                <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-antrun-plugin -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-antrun-plugin</artifactId>
                    <executions>
                        <!-- 在Maven打包阶段进行初步的脚本处理：拷贝配置文件 -->
                        <execution>
                            <id>prepare-resources</id>
                            <phase>package</phase>
                            <goals>
                                <goal>run</goal>
                            </goals>
                            <configuration>
                                <target>
                                    <echo message="antrun copy resources"/>

                                    <!-- 处理脚本模式依赖资源 -->

                                    <!-- 步骤1、拷贝应用程序Jar文件 -->
                                    <copy file="${project.build.directory}/${project.build.finalName}.jar"
                                          todir="${appassembler-dir}/${project.artifactId}/lib"/>

                                    <!-- 步骤2、创建生产环境配置文件夹：拷贝配置文件以便覆盖默认配置 -->
                                    <mkdir dir="${appassembler-dir}/${project.artifactId}/conf"/>

                                    <copy file="${basedir}/src/main/resources/bootstrap-dev.properties"
                                          todir="${appassembler-dir}/${project.artifactId}/conf"/>
                                    <copy file="${basedir}/src/main/resources/bootstrap-local.properties"
                                          todir="${appassembler-dir}/${project.artifactId}/conf"/>
                                    <copy file="${basedir}/src/main/resources/bootstrap-pre.properties"
                                          todir="${appassembler-dir}/${project.artifactId}/conf"/>
                                    <copy file="${basedir}/src/main/resources/bootstrap-prod.properties"
                                          todir="${appassembler-dir}/${project.artifactId}/conf"/>
                                    <copy file="${basedir}/src/main/resources/bootstrap-qa.properties"
                                          todir="${appassembler-dir}/${project.artifactId}/conf"/>
                                    <copy file="${basedir}/src/main/resources/bootstrap-test.properties"
                                          todir="${appassembler-dir}/${project.artifactId}/conf"/>
                                    <copy file="${basedir}/src/main/resources/bootstrap.properties"
                                          todir="${appassembler-dir}/${project.artifactId}/conf"/>
                                    <copy file="${basedir}/src/main/resources/j2cache.properties"
                                          todir="${appassembler-dir}/${project.artifactId}/conf"/>

                                    <copy file="${basedir}/src/main/resources/application-dev.yaml"
                                          todir="${appassembler-dir}/${project.artifactId}/conf"/>
                                    <copy file="${basedir}/src/main/resources/application-local.yaml"
                                          todir="${appassembler-dir}/${project.artifactId}/conf"/>
                                    <copy file="${basedir}/src/main/resources/application-pre.yaml"
                                          todir="${appassembler-dir}/${project.artifactId}/conf"/>
                                    <copy file="${basedir}/src/main/resources/application-prod.yaml"
                                          todir="${appassembler-dir}/${project.artifactId}/conf"/>
                                    <copy file="${basedir}/src/main/resources/application-qa.yaml"
                                          todir="${appassembler-dir}/${project.artifactId}/conf"/>
                                    <copy file="${basedir}/src/main/resources/application-test.yaml"
                                          todir="${appassembler-dir}/${project.artifactId}/conf"/>

                                    <!-- 处理服务模式依赖资源 -->

                                    <!-- 步骤1、拷贝应用程序Jar文件 -->
                                    <copy file="${project.build.directory}/${project.build.finalName}.jar"
                                          todir="${appassembler-jsw-dir}/${project.artifactId}/lib"/>

                                    <!-- 步骤2、创建生产环境配置文件夹：拷贝配置文件以便覆盖默认配置 -->
                                    <mkdir dir="${appassembler-jsw-dir}/${project.artifactId}/conf"/>

                                    <copy file="${basedir}/src/main/resources/bootstrap-dev.properties"
                                          todir="${appassembler-jsw-dir}/${project.artifactId}/conf"/>
                                    <copy file="${basedir}/src/main/resources/bootstrap-local.properties"
                                          todir="${appassembler-jsw-dir}/${project.artifactId}/conf"/>
                                    <copy file="${basedir}/src/main/resources/bootstrap-pre.properties"
                                          todir="${appassembler-jsw-dir}/${project.artifactId}/conf"/>
                                    <copy file="${basedir}/src/main/resources/bootstrap-prod.properties"
                                          todir="${appassembler-jsw-dir}/${project.artifactId}/conf"/>
                                    <copy file="${basedir}/src/main/resources/bootstrap-qa.properties"
                                          todir="${appassembler-jsw-dir}/${project.artifactId}/conf"/>
                                    <copy file="${basedir}/src/main/resources/bootstrap-test.properties"
                                          todir="${appassembler-jsw-dir}/${project.artifactId}/conf"/>
                                    <copy file="${basedir}/src/main/resources/bootstrap.properties"
                                          todir="${appassembler-jsw-dir}/${project.artifactId}/conf"/>
                                    <copy file="${basedir}/src/main/resources/j2cache.properties"
                                          todir="${appassembler-jsw-dir}/${project.artifactId}/conf"/>

                                    <copy file="${basedir}/src/main/resources/application-dev.yaml"
                                          todir="${appassembler-jsw-dir}/${project.artifactId}/conf"/>
                                    <copy file="${basedir}/src/main/resources/application-local.yaml"
                                          todir="${appassembler-jsw-dir}/${project.artifactId}/conf"/>
                                    <copy file="${basedir}/src/main/resources/application-pre.yaml"
                                          todir="${appassembler-jsw-dir}/${project.artifactId}/conf"/>
                                    <copy file="${basedir}/src/main/resources/application-prod.yaml"
                                          todir="${appassembler-jsw-dir}/${project.artifactId}/conf"/>
                                    <copy file="${basedir}/src/main/resources/application-qa.yaml"
                                          todir="${appassembler-jsw-dir}/${project.artifactId}/conf"/>
                                    <copy file="${basedir}/src/main/resources/application-test.yaml"
                                          todir="${appassembler-jsw-dir}/${project.artifactId}/conf"/>

                                    <!-- 步骤3、拷贝Java环境变量设置文件
                                    <copy file="${basedir}/runenv/setenv" todir="${appassembler-dir}/${project.artifactId}/bin" />
                                    <copy file="${basedir}/runenv/setenv.bat" todir="${appassembler-dir}/${project.artifactId}/bin" />
                                    -->
                                    <!-- 步骤4、拷贝Java运行环境文件
                                    <copy file="${basedir}/runenv/jre-8u60-linux-x64.tar.gz"
                                        todir="${appassembler-dir}/${project.artifactId}" /> -->
                                    <!-- 步骤5、构建应用安装脚本 -->
                                    <delete file="${appassembler-dir}/${project.artifactId}/install.sh"></delete>
                                    <echo file="${appassembler-dir}/${project.artifactId}/install.sh" append="true"
                                          message="#!/bin/sh${line.separator}"></echo>
                                    <echo file="${appassembler-dir}/${project.artifactId}/install.sh" append="true"
                                          message="#解压独立jre运行包【如果希望工程使用独有的jdk、jre请将压缩包放置在项目根目录并修改下面的配置】${line.separator}"></echo>
                                    <echo file="${appassembler-dir}/${project.artifactId}/install.sh" append="true"
                                          message="#rm -rf jre${line.separator}"></echo>
                                    <echo file="${appassembler-dir}/${project.artifactId}/install.sh" append="true"
                                          message="#tar -zxvf jre-8u60-linux-x64.tar.gz${line.separator}"></echo>
                                    <echo file="${appassembler-dir}/${project.artifactId}/install.sh" append="true"
                                          message="#File Authorized${line.separator}"></echo>
                                    <echo file="${appassembler-dir}/${project.artifactId}/install.sh" append="true"
                                          message="chmod 755 jre/bin/*${line.separator}"></echo>
                                    <echo file="${appassembler-dir}/${project.artifactId}/install.sh" append="true"
                                          message="chmod 755 bin/*${line.separator}"></echo>
                                    <echo file="${appassembler-dir}/${project.artifactId}/install.sh" append="true"
                                          message="chmod 755 ${appassembler-bin-fileName}${line.separator}"></echo>
                                    <echo file="${appassembler-dir}/${project.artifactId}/install.sh" append="true"
                                          message="chmod 755 uninstall.sh${line.separator}"></echo>
                                    <echo file="${appassembler-dir}/${project.artifactId}/install.sh" append="true"
                                          message="#启停脚本服务化软连接${line.separator}"></echo>
                                    <echo file="${appassembler-dir}/${project.artifactId}/install.sh" append="true"
                                          message="rm -rf /etc/init.d/${project.artifactId}${line.separator}"></echo>
                                    <echo file="${appassembler-dir}/${project.artifactId}/install.sh" append="true"
                                          message="cp ./${appassembler-bin-fileName} /etc/init.d/${project.artifactId}${line.separator}"></echo>
                                    <echo file="${appassembler-dir}/${project.artifactId}/install.sh" append="true"
                                          message="chkconfig --add ${project.artifactId}${line.separator}"></echo>
                                    <echo file="${appassembler-dir}/${project.artifactId}/install.sh" append="true"
                                          message="chkconfig --level 345 ${project.artifactId} on${line.separator}"></echo>
                                    <!-- 步骤6、构建应用卸载脚本 -->
                                    <delete file="${appassembler-dir}/${project.artifactId}/uninstall.sh"></delete>
                                    <echo file="${appassembler-dir}/${project.artifactId}/uninstall.sh" append="true"
                                          message="#!/bin/sh${line.separator}"></echo>
                                    <echo file="${appassembler-dir}/${project.artifactId}/uninstall.sh" append="true"
                                          message="chkconfig ${appassembler-bin-fileName} off${line.separator}"></echo>
                                    <echo file="${appassembler-dir}/${project.artifactId}/uninstall.sh" append="true"
                                          message="chkconfig --del ${appassembler-bin-fileName}${line.separator}"></echo>
                                    <echo file="${appassembler-dir}/${project.artifactId}/uninstall.sh" append="true"
                                          message="rm -rf /etc/init.d/${project.artifactId}${line.separator}"></echo>
                                    <echo file="${appassembler-dir}/${project.artifactId}/uninstall.sh" append="true"
                                          message="#rm -rf jre${line.separator}"></echo>

                                </target>
                            </configuration>
                        </execution>
                        <!-- 在Maven打包阶段进行进一步的脚本处理：构建zip压缩包 -->
                        <execution>
                            <id>build-zip-package</id>
                            <phase>install</phase>
                            <goals>
                                <goal>run</goal>
                            </goals>
                            <configuration>
                                <target>
                                    <echo message="build zip package"/>
                                    <delete file="${appassembler-jsw-dir}/${project.artifactId}-${project.version}-jsw.zip"></delete>
                                    <zip basedir="${appassembler-jsw-dir}/${project.artifactId}"
                                         destfile="${appassembler-jsw-dir}/${project.artifactId}-${project.version}-jsw.zip"/>
                                    <delete file="${appassembler-dir}/${project.artifactId}-${project.version}.zip"></delete>
                                    <zip basedir="${appassembler-dir}/${project.artifactId}"
                                         destfile="${appassembler-dir}/${project.artifactId}-${project.version}.zip"/>
                                </target>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

</project>
