spring.main.allow-bean-definition-overriding=true
management.endpoints.web.exposure.include=*
spring.application.name=jeebiz-cloud-shadow
spring.profiles.active=pre
################################################################################################################  
### Nacos 配置
### https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html
### 在 Nacos Spring Cloud 中，dataId 的完整格式如下：
### ${prefix}-${spring.profile.active}.${file-extension}
### 1、prefix 默认为 spring.application.name 的值，也可以通过配置项 spring.cloud.nacos.config.prefix来配置。
### 2、spring.profile.active 即为当前环境对应的 profile，详情可以参考 Spring Boot文档。 注意：当 spring.profile.active 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变
### 3、file-exetension 为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension 来配置。目前只支持 properties 和 yaml 类型。
################################################################################################################
spring.cloud.nacos.config.enabled=true
#nacos config dataId prefix
spring.cloud.nacos.config.prefix=${spring.application.name}
#namespace, separation configuration of different environments.
spring.cloud.nacos.config.namespace=ad8314a5-1f72-4a40-8741-3dc08f928845
#access key for namespace
#spring.cloud.nacos.config.access-key=nacos
#secret key for namespace
#spring.cloud.nacos.config.secret-key=nacos
#endpoint for Nacos, the domain name of a service, through which the server address can be dynamically obtained.
#spring.cloud.nacos.config.endpoint=
#nacos config server address
spring.cloud.nacos.config.server-addr=180.76.120.252:8848
#cluster name for nacos server.
#spring.cloud.nacos.discovery.cluster-name
#nacos config group, group is config data meta info.
spring.cloud.nacos.config.group=DEFAULT_GROUP
#context path for nacos config server.
spring.cloud.nacos.config.context-path=nacos
#encode for nacos config content.
spring.cloud.nacos.config.encode=UTF-8
#the suffix of nacos config dataId, also the file extension of config content.
# 指定配置的后缀，支持 properties、yaml，默认为 properties
#spring.cloud.nacos.config.file-extension=properties
spring.cloud.nacos.config.file-extension=yaml
#timeout for get config from nacos.
spring.cloud.nacos.config.timeout=3000
# Nacos注册中心
spring.cloud.service-registry.auto-registration.enabled=true
spring.cloud.nacos.discovery.enabled=true
#whether your service is a https service
spring.cloud.nacos.discovery.secure=false
#cluster name for nacos server.
#spring.cloud.nacos.discovery.cluster-name
#namespace, separation registry of different environments.
spring.cloud.nacos.discovery.namespace=ad8314a5-1f72-4a40-8741-3dc08f928845
#access key for namespace
#spring.cloud.nacos.discovery.access-key=nacos
#secret key for namespace
#spring.cloud.nacos.discovery.secret-key=nacos
#the domain name of a service, through which the server address can be dynamically obtained.
#spring.cloud.nacos.discovery.endpoint=
#nacos discovery server address
spring.cloud.nacos.discovery.server-addr=180.76.120.252:8848
#weight for service instance, the larger the value, the larger the weight.
spring.cloud.nacos.discovery.weight=5
#watch delay,duration to pull new service from nacos server.
spring.cloud.nacos.discovery.watch-delay=30000
#nacos naming log file name
#spring.cloud.nacos.discovery.log-name=nacos
#extra metadata to register.
spring.cloud.nacos.discovery.metadata.name=${swagger.title}
spring.cloud.nacos.discovery.metadata.detail=${swagger.description}
spring.cloud.nacos.discovery.metadata.version=${swagger.version}
################################################################################################################
### Nepxion 配置
### https://github.com/Nepxion/Discovery
################################################################################################################
# Eureka config for discovery
eureka.instance.metadataMap.group=${spring.cloud.nacos.discovery.namespace}
eureka.instance.metadataMap.version=${application.formatted-version}
eureka.instance.metadataMap.region=${spring.profiles.active}
eureka.instance.metadataMap.env=env1
# Consul config for discovery
# 参考https://springcloud.cc/spring-cloud-consul.html - 元数据和Consul标签
spring.cloud.consul.discovery.tags=group=${spring.cloud.nacos.discovery.namespace},version=${application.formatted-version},region=${spring.profiles.active},env=env1
# Zookeeper config for discovery
spring.cloud.zookeeper.discovery.metadata.group=${spring.cloud.nacos.discovery.namespace}
spring.cloud.zookeeper.discovery.metadata.version=${application.formatted-version}
spring.cloud.zookeeper.discovery.metadata.region=${spring.profiles.active}
spring.cloud.zookeeper.discovery.metadata.env=env1
# Nacos config for discovery
spring.cloud.nacos.discovery.metadata.group=${spring.cloud.nacos.discovery.namespace}
spring.cloud.nacos.discovery.metadata.version=${application.formatted-version}
spring.cloud.nacos.discovery.metadata.region=${spring.profiles.active}
spring.cloud.nacos.discovery.metadata.env=env1
nacos.server-addr=${spring.cloud.nacos.discovery.server-addr}
################################################################################################################
###j2cache (J2CacheConfig) 基本配置：
###https://gitee.com/ld/J2Cache
###https://gitee.com/ld/J2Cache/tree/master/modules/spring-boot2-starter
################################################################################################################
j2cache.config-location=/j2cache.properties
#j2cache.config-location=/j2cache-${spring.profiles.active}.properties
j2cache.l2-cache-open=true
j2cache.open-spring-cache=true
j2cache.allow-null-values=false
j2cache.cache-clean-mode=active
j2cache.redis-client=lettuce